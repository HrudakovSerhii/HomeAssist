/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get app status */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description App status */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["AppResponse"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/health": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get health status */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Health status */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["HealthResponse"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/auth/register": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Register a new user */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["CreateUserDto"];
                };
            };
            responses: {
                /** @description User created successfully */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["AuthResponse"];
                    };
                };
                /** @description Bad request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResponse"];
                    };
                };
                /** @description Internal server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResponse"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/auth/login": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Login user */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["LoginDto"];
                };
            };
            responses: {
                /** @description Login successful */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["AuthResponse"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResponse"];
                    };
                };
                /** @description Internal server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResponse"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/auth/add-account": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Add email account to user */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["AddEmailAccountDto"];
                };
            };
            responses: {
                /** @description Email account added successfully */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** Format: uuid */
                            id?: string;
                            /** Format: email */
                            email?: string;
                            /** @enum {string} */
                            accountType?: "GMAIL" | "OUTLOOK" | "YAHOO" | "IMAP_GENERIC";
                            isActive?: boolean;
                        };
                    };
                };
                /** @description Bad request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResponse"];
                    };
                };
                /** @description Internal server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResponse"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/auth/test-imap": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Test IMAP connection */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["TestImapDto"];
                };
            };
            responses: {
                /** @description IMAP test result */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ImapTestResponse"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/data/extracted": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get extracted email data with filtering and pagination */
        get: {
            parameters: {
                query?: {
                    page?: number;
                    limit?: number;
                    search?: string;
                    category?: components["schemas"]["EmailCategory"];
                    priority?: components["schemas"]["Priority"];
                    sentiment?: components["schemas"]["Sentiment"];
                    entityType?: components["schemas"]["EntityType"];
                    actionType?: components["schemas"]["ActionType"];
                    dateFrom?: string;
                    dateTo?: string;
                    minConfidence?: number;
                    sortBy?: "createdAt" | "updatedAt" | "confidence" | "receivedAt";
                    sortOrder?: "asc" | "desc";
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Extracted email data */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ExtractedDataResponse"];
                    };
                };
                /** @description Bad request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResponse"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/data/filter-options": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get available filter options */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Filter options */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["FilterOptions"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/data/emails/{emailId}/actions/{actionIndex}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /** Update action item completion status */
        patch: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    emailId: string;
                    actionIndex: number;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["UpdateActionItemDto"];
                };
            };
            responses: {
                /** @description Action item updated successfully */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ActionItem"];
                    };
                };
                /** @description Bad request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResponse"];
                    };
                };
                /** @description Not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResponse"];
                    };
                };
            };
        };
        trace?: never;
    };
    "/llm/execute": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Execute LLM prompt */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["LLMExecuteDto"];
                };
            };
            responses: {
                /** @description LLM execution result */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["LLMResponse"];
                    };
                };
                /** @description Bad request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResponse"];
                    };
                };
                /** @description Internal server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResponse"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        User: {
            /** Format: uuid */
            id: string;
            username: string;
            /** Format: email */
            email?: string | null;
            displayName: string;
            profilePicture?: string | null;
            isActive: boolean;
            /** Format: date-time */
            createdAt: string;
            /** Format: date-time */
            updatedAt: string;
            /** Format: date-time */
            lastLoginAt: string;
        };
        CreateUserDto: {
            username: string;
            password: string;
            displayName: string;
            /** Format: email */
            email?: string;
        };
        LoginDto: {
            username: string;
            password: string;
        };
        AuthResponse: {
            user: components["schemas"]["User"];
            token: string;
            /** Format: date-time */
            expiresAt: string;
            hasActiveAccounts: boolean;
        };
        AddEmailAccountDto: {
            /** Format: uuid */
            userId: string;
            /** Format: email */
            email: string;
            appPassword: string;
            displayName?: string;
            /** @enum {string} */
            accountType?: "GMAIL" | "OUTLOOK" | "YAHOO" | "IMAP_GENERIC";
        };
        TestImapDto: {
            /** Format: email */
            email: string;
            appPassword: string;
            /** @enum {string} */
            accountType?: "GMAIL" | "OUTLOOK" | "YAHOO" | "IMAP_GENERIC";
        };
        ImapTestResponse: {
            success: boolean;
            message: string;
        };
        /** @enum {string} */
        EmailCategory: "WORK" | "PERSONAL" | "FINANCE" | "HEALTH" | "BILLS" | "RECEIPTS" | "INVOICES" | "STATEMENTS" | "CONTRACTS" | "OTHER";
        /** @enum {string} */
        Priority: "LOW" | "MEDIUM" | "HIGH" | "URGENT";
        /** @enum {string} */
        Sentiment: "POSITIVE" | "NEUTRAL" | "NEGATIVE";
        /** @enum {string} */
        EntityType: "DATE" | "PERSON" | "ORGANIZATION" | "PRODUCT" | "LOCATION" | "TIME" | "EVENT" | "MONEY" | "PHONE" | "EMAIL";
        /** @enum {string} */
        ActionType: "MEETING" | "TASK" | "FOLLOW_UP" | "REVIEW" | "NOTIFICATION" | "TRACKING" | "PREPARATION" | "PAYMENT" | "REMINDER";
        EntityExtraction: {
            /** Format: uuid */
            id: string;
            entityType: components["schemas"]["EntityType"];
            entityValue: string;
            confidence: number;
            startPosition?: number | null;
            endPosition?: number | null;
            context?: string | null;
        };
        ActionItem: {
            /** Format: uuid */
            id: string;
            description: string;
            actionType: components["schemas"]["ActionType"];
            /** Format: date-time */
            dueDate?: string | null;
            priority: components["schemas"]["Priority"];
            isCompleted: boolean;
            /** Format: date-time */
            completedAt?: string | null;
            assignedTo?: string | null;
            /** Format: date-time */
            createdAt: string;
            /** Format: date-time */
            updatedAt: string;
        };
        Email: {
            /** Format: uuid */
            id: string;
            messageId: string;
            subject: string;
            /** Format: email */
            fromAddress: string;
            toAddresses: string[];
            ccAddresses?: string[];
            bccAddresses?: string[];
            /** Format: date-time */
            receivedAt: string;
            bodyText?: string | null;
            bodyHtml?: string | null;
            isProcessed: boolean;
            /** Format: date-time */
            createdAt: string;
            /** Format: date-time */
            updatedAt: string;
        };
        ExtractedEmailData: {
            /** Format: uuid */
            id: string;
            /** Format: uuid */
            emailId: string;
            category: components["schemas"]["EmailCategory"];
            priority: components["schemas"]["Priority"];
            sentiment: components["schemas"]["Sentiment"];
            summary: string;
            tags: string[];
            confidence: number;
            /** Format: date-time */
            createdAt: string;
            /** Format: date-time */
            updatedAt: string;
            email: components["schemas"]["Email"];
            entities: components["schemas"]["EntityExtraction"][];
            actionItems: components["schemas"]["ActionItem"][];
        };
        ExtractedDataQueryDto: {
            /** @default 1 */
            page: number;
            /** @default 10 */
            limit: number;
            search?: string;
            category?: components["schemas"]["EmailCategory"];
            priority?: components["schemas"]["Priority"];
            sentiment?: components["schemas"]["Sentiment"];
            entityType?: components["schemas"]["EntityType"];
            actionType?: components["schemas"]["ActionType"];
            /** Format: date */
            dateFrom?: string;
            /** Format: date */
            dateTo?: string;
            minConfidence?: number;
            /**
             * @default createdAt
             * @enum {string}
             */
            sortBy: "createdAt" | "updatedAt" | "confidence" | "receivedAt";
            /**
             * @default desc
             * @enum {string}
             */
            sortOrder: "asc" | "desc";
        };
        Pagination: {
            total: number;
            page: number;
            limit: number;
            totalPages: number;
        };
        ExtractedDataResponse: {
            data: components["schemas"]["ExtractedEmailData"][];
            pagination: components["schemas"]["Pagination"];
        };
        FilterOptions: {
            categories: components["schemas"]["EmailCategory"][];
            priorities: components["schemas"]["Priority"][];
            sentiments: components["schemas"]["Sentiment"][];
            entityTypes: components["schemas"]["EntityType"][];
            actionTypes: components["schemas"]["ActionType"][];
        };
        UpdateActionItemDto: {
            isCompleted: boolean;
        };
        HealthResponse: {
            /** @enum {string} */
            status: "ok";
            /** Format: date-time */
            timestamp: string;
            environment: string;
            version: string;
            apiPrefix: string;
        };
        LLMExecuteDto: {
            prompt: string;
            llmModel: string;
            /**
             * @default local
             * @enum {string}
             */
            target: "local" | "remote";
            options?: {
                [key: string]: unknown;
            };
            history?: {
                role: string;
                content: string;
            }[];
        };
        LLMResponse: {
            model: string;
            /** Format: date-time */
            createdAt: string;
            response: string;
            raw: {
                [key: string]: unknown;
            };
        };
        AppResponse: {
            message: string;
        };
        ErrorResponse: {
            statusCode: number;
            message: string;
            error?: string;
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export type operations = Record<string, never>;
