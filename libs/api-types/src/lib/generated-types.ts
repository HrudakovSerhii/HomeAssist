/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get app status */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description App status */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["AppResponse"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/health": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get health status */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Health status */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["HealthResponse"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/auth/register": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Register a new user */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["CreateUserDto"];
                };
            };
            responses: {
                /** @description User created successfully */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["AuthResponse"];
                    };
                };
                /** @description Bad request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResponse"];
                    };
                };
                /** @description Internal server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResponse"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/auth/login": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Login user */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["LoginDto"];
                };
            };
            responses: {
                /** @description Login successful */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["AuthResponse"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResponse"];
                    };
                };
                /** @description Internal server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResponse"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/auth/add-account": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Add email account to user */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["AddEmailAccountDto"];
                };
            };
            responses: {
                /** @description Email account added successfully */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["AddAccountResponse"];
                    };
                };
                /** @description Bad request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResponse"];
                    };
                };
                /** @description Internal server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResponse"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/auth/test-imap": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Test IMAP connection */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["TestImapDto"];
                };
            };
            responses: {
                /** @description IMAP test result */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ImapTestResponse"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/auth/accounts": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get user email accounts */
        get: {
            parameters: {
                query: {
                    userId: string;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description User accounts retrieved successfully */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["UserAccountsResponse"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResponse"];
                    };
                };
                /** @description Internal server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResponse"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/data/processed-emails": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get processed emails with filtering and pagination */
        get: {
            parameters: {
                query?: {
                    page?: number;
                    limit?: number;
                    search?: string;
                    category?: components["schemas"]["EmailCategory"];
                    priority?: components["schemas"]["Priority"];
                    sentiment?: components["schemas"]["Sentiment"];
                    entityType?: components["schemas"]["EntityType"];
                    actionType?: components["schemas"]["ActionType"];
                    dateFrom?: string;
                    dateTo?: string;
                    minConfidence?: number;
                    sortBy?: "createdAt" | "updatedAt" | "confidence" | "receivedAt";
                    sortOrder?: "asc" | "desc";
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Processed emails data */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ProcessedEmailsResponse"];
                    };
                };
                /** @description Bad request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResponse"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/data/filter-options": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get available filter options */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Filter options */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["FilterOptionsResponse"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/data/emails/{emailId}/actions/{actionIndex}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /** Update action item completion status */
        patch: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    emailId: string;
                    actionIndex: number;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["UpdateActionItemDto"];
                };
            };
            responses: {
                /** @description Action item updated successfully */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ActionItemResponse"];
                    };
                };
                /** @description Bad request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResponse"];
                    };
                };
                /** @description Not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResponse"];
                    };
                };
            };
        };
        trace?: never;
    };
    "/llm/execute": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Execute LLM prompt */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["LLMExecuteDto"];
                };
            };
            responses: {
                /** @description LLM execution result */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["LLMResponse"];
                    };
                };
                /** @description Bad request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResponse"];
                    };
                };
                /** @description Internal server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResponse"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/email/ingest": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Manually trigger email ingestion */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["IngestEmailsDto"];
                };
            };
            responses: {
                /** @description Email ingestion completed */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["EmailIngestionResponse"];
                    };
                };
                /** @description Internal server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResponse"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/email/ingest/{userId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Ingest and process emails for a specific user */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    userId: string;
                };
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": components["schemas"]["IngestUserEmailsDto"];
                };
            };
            responses: {
                /** @description Email ingestion completed */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["EmailIngestionResponse"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/email/status/{userId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get processing status for a user */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    userId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Processing status */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ProcessingStatusResponse"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/email/{id}/process": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Manually process a specific email */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": components["schemas"]["ProcessEmailDto"];
                };
            };
            responses: {
                /** @description Email processed successfully */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** Format: uuid */
                            emailId?: string;
                            success?: boolean;
                            error?: string;
                        };
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/email/process/batch": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Process batch of pending emails */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": components["schemas"]["ProcessBatchDto"];
                };
            };
            responses: {
                /** @description Batch processing completed */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            success?: boolean;
                            message?: string;
                            processed?: number;
                            failed?: number;
                        };
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/processing-schedules": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get user processing schedules */
        get: {
            parameters: {
                query: {
                    userId: string;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description List of schedules */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ProcessingScheduleWithAccount"][];
                    };
                };
            };
        };
        put?: never;
        /** Create processing schedule */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["CreateProcessingScheduleDto"];
                };
            };
            responses: {
                /** @description Created */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ProcessingSchedule"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/processing-schedules/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** Update processing schedule */
        put: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    id: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["UpdateProcessingScheduleDto"];
                };
            };
            responses: {
                /** @description Updated */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ProcessingSchedule"];
                    };
                };
            };
        };
        post?: never;
        /** Delete processing schedule */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Deleted */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            success?: boolean;
                        };
                    };
                };
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/processing-schedules/{id}/execute": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Execute schedule manually */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Execution started */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            success?: boolean;
                            /** Format: uuid */
                            executionId?: string;
                        };
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/processing-schedules/{id}/status": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get schedule execution status */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Status */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ScheduleExecutionStatus"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/processing-schedules/validate": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Validate schedule configuration */
        post: {
            parameters: {
                query?: {
                    excludeId?: string;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["CreateProcessingScheduleDto"];
                };
            };
            responses: {
                /** @description Validation result */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ValidationResult"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/processing-schedules/check-conflicts": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Check schedule conflicts */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        cronExpression?: string;
                        timezone: string;
                        specificDates?: string[];
                        /** Format: uuid */
                        excludeId?: string;
                    };
                };
            };
            responses: {
                /** @description Conflict check result */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            hasConflicts: boolean;
                            conflicts: {
                                /** Format: date-time */
                                conflictTime?: string;
                                conflictingSchedules?: string[];
                                suggestedAlternatives?: string[];
                            }[];
                        };
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/processing-schedules/cron-calendar": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get cron job calendar */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Calendar */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["CronJobCalendarEntry"][];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/processing-schedules/analytics/{userId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get processing analytics */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    userId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Analytics */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ProcessingAnalytics"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/processing-schedules/bulk-enable": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Bulk enable schedules */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        scheduleIds: string[];
                    };
                };
            };
            responses: {
                /** @description Bulk enable result */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["BulkUpdateResponse"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/processing-schedules/bulk-disable": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Bulk disable schedules */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        scheduleIds: string[];
                    };
                };
            };
            responses: {
                /** @description Bulk disable result */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["BulkUpdateResponse"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/processing-schedules/{id}/details": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get schedule details */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Details */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ScheduleDetails"];
                    };
                };
                /** @description Not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResponse"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        User: {
            /** Format: uuid */
            id: string;
            username: string;
            /** Format: email */
            email?: string | null;
            displayName: string;
            profilePicture?: string | null;
            isActive: boolean;
            /** Format: date-time */
            createdAt: string;
            /** Format: date-time */
            updatedAt: string;
            /** Format: date-time */
            lastLoginAt: string;
        };
        CreateUserDto: {
            username: string;
            password: string;
            displayName: string;
            /** Format: email */
            email?: string;
        };
        LoginDto: {
            username: string;
            password: string;
        };
        AuthResponse: {
            success: boolean;
            message?: string;
            user: components["schemas"]["User"];
            token?: string;
            /** Format: date-time */
            expiresAt?: string;
            hasActiveAccounts: boolean;
        };
        AddEmailAccountDto: {
            /** Format: uuid */
            userId: string;
            /** Format: email */
            email: string;
            appPassword: string;
            displayName?: string;
            /** @enum {string} */
            accountType?: "GMAIL" | "OUTLOOK" | "YAHOO" | "IMAP_GENERIC";
        };
        TestImapDto: {
            /** Format: email */
            email: string;
            appPassword: string;
            /** @enum {string} */
            accountType?: "GMAIL" | "OUTLOOK" | "YAHOO" | "IMAP_GENERIC";
        };
        ImapTestResponse: {
            success: boolean;
            message: string;
        };
        AddAccountResponse: {
            success: boolean;
            message: string;
            account: {
                /** Format: uuid */
                id: string;
                /** Format: email */
                email: string;
                displayName: string;
                /** @enum {string} */
                accountType: "GMAIL" | "OUTLOOK" | "YAHOO" | "IMAP_GENERIC";
                isActive: boolean;
            };
        };
        /** @enum {string} */
        EmailCategory: "WORK" | "PERSONAL" | "FINANCE" | "HEALTH" | "BILLS" | "RECEIPTS" | "INVOICES" | "STATEMENTS" | "CONTRACTS" | "OTHER";
        /** @enum {string} */
        Priority: "LOW" | "MEDIUM" | "HIGH" | "URGENT";
        /** @enum {string} */
        Sentiment: "POSITIVE" | "NEUTRAL" | "NEGATIVE";
        /** @enum {string} */
        EntityType: "PERSON" | "ORGANIZATION" | "DATE" | "TIME" | "LOCATION" | "EMAIL_ADDRESS" | "PHONE_NUMBER" | "URL" | "AMOUNT" | "CURRENCY" | "INVOICE_NUMBER" | "ACCOUNT_NUMBER" | "PRODUCT" | "REGION" | "TECHNOLOGY" | "DATE_RANGE";
        /** @enum {string} */
        ActionType: "MEETING" | "TASK" | "FOLLOW_UP" | "REVIEW" | "NOTIFICATION" | "TRACKING" | "PREPARATION" | "PAYMENT" | "REMINDER";
        /** @enum {string} */
        ProcessingStatus: "PENDING" | "PROCESSING" | "COMPLETED" | "FAILED" | "SKIPPED";
        EntityExtraction: {
            /** Format: uuid */
            id: string;
            entityType: components["schemas"]["EntityType"];
            entityValue: string;
            confidence: number;
            startPosition?: number | null;
            endPosition?: number | null;
            context?: string | null;
        };
        ActionItem: {
            /** Format: uuid */
            id: string;
            description: string;
            actionType: components["schemas"]["ActionType"];
            /** Format: date-time */
            dueDate?: string | null;
            priority: components["schemas"]["Priority"];
            isCompleted: boolean;
            /** Format: date-time */
            completedAt?: string | null;
            assignedTo?: string | null;
            /** Format: date-time */
            createdAt: string;
            /** Format: date-time */
            updatedAt: string;
        };
        ProcessedEmails: {
            /** Format: uuid */
            id: string;
            messageId: string;
            /** Format: uuid */
            emailAccountId: string;
            subject: string;
            /** Format: email */
            fromAddress: string;
            toAddresses: string[];
            ccAddresses?: string[];
            bccAddresses?: string[];
            /** Format: date-time */
            receivedAt: string;
            bodyText?: string | null;
            bodyHtml?: string | null;
            processingStatus: components["schemas"]["ProcessingStatus"];
            category: components["schemas"]["EmailCategory"];
            priority: components["schemas"]["Priority"];
            sentiment: components["schemas"]["Sentiment"];
            summary: string;
            tags: string[];
            confidence: number;
            /** Format: date-time */
            createdAt: string;
            /** Format: date-time */
            updatedAt: string;
            entities: components["schemas"]["EntityExtraction"][];
            actionItems: components["schemas"]["ActionItem"][];
        };
        ProcessedEmailsQueryDto: {
            /** @default 1 */
            page: number;
            /** @default 10 */
            limit: number;
            search?: string;
            category?: components["schemas"]["EmailCategory"];
            priority?: components["schemas"]["Priority"];
            sentiment?: components["schemas"]["Sentiment"];
            entityType?: components["schemas"]["EntityType"];
            actionType?: components["schemas"]["ActionType"];
            /** Format: date */
            dateFrom?: string;
            /** Format: date */
            dateTo?: string;
            minConfidence?: number;
            /**
             * @default createdAt
             * @enum {string}
             */
            sortBy: "createdAt" | "updatedAt" | "confidence" | "receivedAt";
            /**
             * @default desc
             * @enum {string}
             */
            sortOrder: "asc" | "desc";
        };
        Pagination: {
            total: number;
            page: number;
            limit: number;
            totalPages: number;
        };
        ProcessedEmailsResponse: {
            data: components["schemas"]["ProcessedEmails"][];
            pagination: components["schemas"]["Pagination"];
            filters: components["schemas"]["ProcessedEmailsFilters"];
        };
        ProcessedEmailsFilters: {
            search?: string | null;
            category?: string | null;
            priority?: string | null;
            sentiment?: string | null;
            entityType?: string | null;
            actionType?: string | null;
            dateFrom?: string | null;
            dateTo?: string | null;
            minConfidence?: number | null;
            sortBy: string;
            /** @enum {string} */
            sortOrder: "asc" | "desc";
        };
        FilterOptions: {
            categories: components["schemas"]["EmailCategory"][];
            priorities: components["schemas"]["Priority"][];
            sentiments: components["schemas"]["Sentiment"][];
            entityTypes: components["schemas"]["EntityType"][];
            actionTypes: components["schemas"]["ActionType"][];
        };
        FilterOptionsResponse: {
            success: boolean;
            message?: string;
            data: components["schemas"]["FilterOptions"];
        };
        UpdateActionItemDto: {
            isCompleted: boolean;
        };
        ActionItemResponse: {
            success: boolean;
            message?: string;
            data: components["schemas"]["ActionItem"];
        };
        HealthResponse: {
            success: boolean;
            message?: string;
            data: {
                /** @enum {string} */
                status: "ok";
                /** Format: date-time */
                timestamp: string;
                environment: string;
                version: string;
                apiPrefix: string;
            };
        };
        LLMExecuteDto: {
            prompt: string;
            llmModel: string;
            /**
             * @default local
             * @enum {string}
             */
            target: "local" | "remote";
            options?: {
                [key: string]: unknown;
            };
            history?: {
                role: string;
                content: string;
            }[];
        };
        LLMResponse: {
            success: boolean;
            message?: string;
            data: {
                model: string;
                /** Format: date-time */
                createdAt: string;
                response: string;
                raw: {
                    [key: string]: unknown;
                };
            };
        };
        AppResponse: {
            success: boolean;
            message: string;
            data?: {
                version?: string;
                environment?: string;
            };
        };
        ErrorResponse: {
            statusCode: number;
            message: string;
            error?: string;
        };
        EmailAccount: {
            /** Format: uuid */
            id: string;
            /** Format: email */
            email: string;
            displayName: string;
            /** @enum {string} */
            accountType: "GMAIL" | "OUTLOOK" | "YAHOO" | "IMAP_GENERIC";
            isActive: boolean;
            isConnected: boolean;
            /** Format: date-time */
            lastSyncAt?: string | null;
            /** Format: date-time */
            createdAt: string;
            /** Format: date-time */
            updatedAt: string;
        };
        UserAccountsResponse: {
            success: boolean;
            message?: string;
            data: components["schemas"]["EmailAccount"][];
        };
        IngestEmailsDto: {
            /** Format: uuid */
            userId: string;
            /** @default 5 */
            limit: number;
            /** @default INBOX */
            folder: string;
            /** Format: date-time */
            since?: string;
            /** Format: date-time */
            before?: string;
            templateName?: string;
        };
        IngestUserEmailsDto: {
            /** @default 5 */
            limit: number;
            /** @default INBOX */
            folder: string;
            /** Format: date-time */
            since?: string;
            /** Format: date-time */
            before?: string;
        };
        ProcessEmailDto: {
            templateName?: string;
        };
        ProcessBatchDto: {
            /** @default 5 */
            limit: number;
        };
        EmailIngestionResponse: {
            success: boolean;
            message: string;
            fetched: number;
            stored: number;
            processed: number;
            failed: number;
            emails: {
                /** Format: uuid */
                id?: string;
                subject?: string;
                processed?: boolean;
                error?: string;
            }[];
        };
        ProcessingStatusResponse: {
            total: number;
            processed: number;
            pending: number;
            failed: number;
        };
        /** @enum {string} */
        EmailIngestionStage: "CONNECTING" | "FETCHING" | "STORING" | "PROCESSING" | "COMPLETED" | "FAILED";
        EmailIngestionProgress: {
            stage: components["schemas"]["EmailIngestionStage"];
            /** Format: uuid */
            emailAccountId: string;
            totalEmails?: number;
            processedEmails?: number;
            currentEmail?: {
                subject: string;
                from: string;
            };
            error?: string;
            completedSteps: {
                fetched: boolean;
                stored: boolean;
                processed: boolean;
            };
            progress: number;
            estimatedTimeRemaining?: number;
        };
        WebSocketMessage: {
            /** @enum {string} */
            type: "register" | "progress";
            data: string | components["schemas"]["EmailIngestionProgress"];
        };
        /** @enum {string} */
        ProcessingType: "DATE_RANGE" | "RECURRING" | "SPECIFIC_DATES";
        /** @enum {string} */
        LlmFocus: "general" | "sentiment" | "urgency";
        CreateProcessingScheduleDto: {
            /** Format: uuid */
            userId: string;
            /** Format: uuid */
            emailAccountId: string;
            name: string;
            description?: string;
            processingType: components["schemas"]["ProcessingType"];
            /** Format: date-time */
            dateRangeFrom?: string;
            /** Format: date-time */
            dateRangeTo?: string;
            cronExpression?: string;
            timezone?: string;
            specificDates?: string[];
            batchSize?: number;
            emailTypePriorities?: {
                [key: string]: string;
            };
            senderPriorities?: {
                [key: string]: string;
            };
            llmFocus?: components["schemas"]["LlmFocus"];
            isEnabled?: boolean;
            isDefault?: boolean;
        };
        UpdateProcessingScheduleDto: {
            /** Format: uuid */
            userId?: string;
            /** Format: uuid */
            emailAccountId?: string;
            name?: string;
            description?: string;
            processingType?: components["schemas"]["ProcessingType"];
            /** Format: date-time */
            dateRangeFrom?: string;
            /** Format: date-time */
            dateRangeTo?: string;
            cronExpression?: string;
            timezone?: string;
            specificDates?: string[];
            batchSize?: number;
            emailTypePriorities?: {
                [key: string]: string;
            };
            senderPriorities?: {
                [key: string]: string;
            };
            llmFocus?: components["schemas"]["LlmFocus"];
            isEnabled?: boolean;
            isDefault?: boolean;
        };
        ProcessingSchedule: {
            /** Format: uuid */
            id: string;
            /** Format: uuid */
            userId: string;
            /** Format: uuid */
            emailAccountId: string;
            name: string;
            description?: string | null;
            isEnabled: boolean;
            isDefault: boolean;
            processingType: components["schemas"]["ProcessingType"];
            /** Format: date-time */
            dateRangeFrom?: string | null;
            /** Format: date-time */
            dateRangeTo?: string | null;
            cronExpression?: string | null;
            timezone: string;
            specificDates?: string[] | null;
            batchSize: number;
            emailTypePriorities: {
                [key: string]: string;
            };
            senderPriorities: {
                [key: string]: string;
            };
            llmFocus: components["schemas"]["LlmFocus"];
            /** Format: date-time */
            lastExecutedAt?: string | null;
            /** Format: date-time */
            nextExecutionAt?: string | null;
            totalExecutions: number;
            successfulExecutions: number;
            failedExecutions: number;
            /** Format: date-time */
            createdAt: string;
            /** Format: date-time */
            updatedAt: string;
        };
        ProcessingScheduleWithAccount: {
            emailAccount?: {
                /** Format: email */
                email: string;
                displayName: string;
            };
        } & components["schemas"]["ProcessingSchedule"];
        ValidationResult: {
            valid: boolean;
            errors: string[];
            warnings: string[];
            cronConflicts?: {
                /** Format: date-time */
                conflictTime?: string;
                conflictingSchedules?: string[];
                suggestedAlternatives?: string[];
            }[];
        };
        ScheduleExecutionStatus: {
            /** Format: uuid */
            id: string;
            /** Format: uuid */
            scheduleId: string;
            scheduleName: string;
            /** @enum {string} */
            status: "RUNNING" | "COMPLETED" | "FAILED" | "CANCELLED" | "PENDING";
            progress: {
                totalBatches: number;
                completedBatches: number;
                totalEmails: number;
                processedEmails: number;
                failedEmails: number;
                completionPercentage: number;
            };
            timing: {
                /** Format: date-time */
                startedAt: string;
                /** Format: date-time */
                completedAt?: string;
                /** Format: date-time */
                estimatedCompletion?: string;
                processingDuration?: number;
            };
            error?: {
                message?: string;
                details?: Record<string, never>;
            };
        };
        CronJobCalendarEntry: {
            /** Format: uuid */
            configId: string;
            configName: string;
            /** Format: uuid */
            userId: string;
            /** Format: email */
            accountEmail: string;
            cronExpression: string;
            nextExecutions: string[];
            timezone: string;
            isEnabled: boolean;
            lastExecution?: {
                /** Format: date-time */
                startedAt?: string;
                status?: string;
                processingDuration?: number;
            };
        };
        ProcessingAnalytics: {
            /** Format: uuid */
            userId: string;
            totalSchedules: number;
            activeSchedules: number;
            totalExecutions: number;
            successfulExecutions: number;
            failedExecutions: number;
            averageProcessingTime: number;
            emailsProcessedToday: number;
            emailsProcessedThisWeek: number;
            emailsProcessedThisMonth: number;
            recentExecutions: {
                /** Format: uuid */
                id: string;
                scheduleName: string;
                status: string;
                /** Format: date-time */
                startedAt: string;
                /** Format: date-time */
                completedAt?: string;
                processedEmails: number;
                failedEmails: number;
            }[];
        };
        BulkUpdateResponse: {
            success: boolean;
            updatedCount: number;
            errors?: string[];
        };
        ScheduleDetails: {
            schedule?: components["schemas"]["ProcessingSchedule"];
            executionStats?: {
                totalExecutions?: number;
                successfulExecutions?: number;
                failedExecutions?: number;
                averageProcessingTime?: number;
                /** Format: date-time */
                lastExecutionAt?: string;
            };
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export type operations = Record<string, never>;
